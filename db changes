USE [master]
GO
/****** Object:  Database [Transfer_App]    Script Date: 9/15/2024 5:21:00 PM ******/
CREATE DATABASE [Transfer_App]
 CONTAINMENT = NONE
 ON  PRIMARY 
( NAME = N'Test', FILENAME = N'C:\Users\Admin\Test.mdf' , SIZE = 8192KB , MAXSIZE = UNLIMITED, FILEGROWTH = 65536KB )
 LOG ON 
( NAME = N'Test_log', FILENAME = N'C:\Users\Admin\Test_log.ldf' , SIZE = 8192KB , MAXSIZE = 2048GB , FILEGROWTH = 65536KB )
 WITH CATALOG_COLLATION = DATABASE_DEFAULT
GO
ALTER DATABASE [Transfer_App] SET COMPATIBILITY_LEVEL = 150
GO
IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [Transfer_App].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO
ALTER DATABASE [Transfer_App] SET ANSI_NULL_DEFAULT OFF 
GO
ALTER DATABASE [Transfer_App] SET ANSI_NULLS OFF 
GO
ALTER DATABASE [Transfer_App] SET ANSI_PADDING OFF 
GO
ALTER DATABASE [Transfer_App] SET ANSI_WARNINGS OFF 
GO
ALTER DATABASE [Transfer_App] SET ARITHABORT OFF 
GO
ALTER DATABASE [Transfer_App] SET AUTO_CLOSE OFF 
GO
ALTER DATABASE [Transfer_App] SET AUTO_SHRINK OFF 
GO
ALTER DATABASE [Transfer_App] SET AUTO_UPDATE_STATISTICS ON 
GO
ALTER DATABASE [Transfer_App] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO
ALTER DATABASE [Transfer_App] SET CURSOR_DEFAULT  GLOBAL 
GO
ALTER DATABASE [Transfer_App] SET CONCAT_NULL_YIELDS_NULL OFF 
GO
ALTER DATABASE [Transfer_App] SET NUMERIC_ROUNDABORT OFF 
GO
ALTER DATABASE [Transfer_App] SET QUOTED_IDENTIFIER OFF 
GO
ALTER DATABASE [Transfer_App] SET RECURSIVE_TRIGGERS OFF 
GO
ALTER DATABASE [Transfer_App] SET  DISABLE_BROKER 
GO
ALTER DATABASE [Transfer_App] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO
ALTER DATABASE [Transfer_App] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO
ALTER DATABASE [Transfer_App] SET TRUSTWORTHY OFF 
GO
ALTER DATABASE [Transfer_App] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO
ALTER DATABASE [Transfer_App] SET PARAMETERIZATION SIMPLE 
GO
ALTER DATABASE [Transfer_App] SET READ_COMMITTED_SNAPSHOT OFF 
GO
ALTER DATABASE [Transfer_App] SET HONOR_BROKER_PRIORITY OFF 
GO
ALTER DATABASE [Transfer_App] SET RECOVERY SIMPLE 
GO
ALTER DATABASE [Transfer_App] SET  MULTI_USER 
GO
ALTER DATABASE [Transfer_App] SET PAGE_VERIFY CHECKSUM  
GO
ALTER DATABASE [Transfer_App] SET DB_CHAINING OFF 
GO
ALTER DATABASE [Transfer_App] SET FILESTREAM( NON_TRANSACTED_ACCESS = OFF ) 
GO
ALTER DATABASE [Transfer_App] SET TARGET_RECOVERY_TIME = 60 SECONDS 
GO
ALTER DATABASE [Transfer_App] SET DELAYED_DURABILITY = DISABLED 
GO
ALTER DATABASE [Transfer_App] SET ACCELERATED_DATABASE_RECOVERY = OFF  
GO
ALTER DATABASE [Transfer_App] SET QUERY_STORE = OFF
GO
USE [Transfer_App]
GO
/****** Object:  Table [dbo].[Accounts]    Script Date: 9/15/2024 5:21:00 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Accounts](
	[AccountID] [int] IDENTITY(1,1) NOT NULL,
	[ClientID] [int] NULL,
	[AccountNumber] [nvarchar](50) NOT NULL,
	[Balance] [decimal](18, 2) NOT NULL,
PRIMARY KEY CLUSTERED 
(
	[AccountID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Clients]    Script Date: 9/15/2024 5:21:00 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Clients](
	[ClientID] [int] IDENTITY(1,1) NOT NULL,
	[Name] [nvarchar](100) NULL,
PRIMARY KEY CLUSTERED 
(
	[ClientID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Transactions]    Script Date: 9/15/2024 5:21:00 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Transactions](
	[TransactionID] [int] IDENTITY(1,1) NOT NULL,
	[FromAccountID] [int] NULL,
	[ToAccountID] [int] NULL,
	[Amount] [decimal](18, 2) NOT NULL,
	[TransactionDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[TransactionID] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[Transactions] ADD  DEFAULT (getdate()) FOR [TransactionDate]
GO
ALTER TABLE [dbo].[Accounts]  WITH CHECK ADD FOREIGN KEY([ClientID])
REFERENCES [dbo].[Clients] ([ClientID])
GO
ALTER TABLE [dbo].[Transactions]  WITH CHECK ADD FOREIGN KEY([FromAccountID])
REFERENCES [dbo].[Accounts] ([AccountID])
GO
ALTER TABLE [dbo].[Transactions]  WITH CHECK ADD FOREIGN KEY([ToAccountID])
REFERENCES [dbo].[Accounts] ([AccountID])
GO
ALTER TABLE [dbo].[Accounts]  WITH CHECK ADD CHECK  (([Balance]>=(0)))
GO
ALTER TABLE [dbo].[Transactions]  WITH CHECK ADD CHECK  (([Amount]>(0)))
GO
/****** Object:  StoredProcedure [dbo].[sp_GetClientAccounts]    Script Date: 9/15/2024 5:21:00 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_GetClientAccounts]
    @ClientID INT
AS
BEGIN
    -- Retrieve all accounts for the given client
    SELECT AccountID, AccountNumber, Balance
    FROM Accounts
    WHERE ClientID = @ClientID;
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_GetUpdatedBalances]    Script Date: 9/15/2024 5:21:00 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_GetUpdatedBalances]
    @FromAccountID INT,
    @ToAccountID INT
AS
BEGIN
    -- Retrieve the updated balances for both accounts
    SELECT AccountID, Balance
    FROM Accounts
    WHERE AccountID = @FromAccountID
    OR AccountID = @ToAccountID;
END;
GO
/****** Object:  StoredProcedure [dbo].[sp_TransferAmount]    Script Date: 9/15/2024 5:21:00 PM ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_TransferAmount]
    @FromAccountID INT,
    @ToAccountID INT,
    @Amount DECIMAL(18, 2)
AS
BEGIN
    -- Start a transaction
    BEGIN TRANSACTION;
    
    -- Declare a variable to hold the balance of the sender's account
    DECLARE @FromAccountBalance DECIMAL(18, 2);
    
    -- Retrieve the balance of the sender's account
    SELECT @FromAccountBalance = Balance
    FROM Accounts
    WHERE AccountID = @FromAccountID;

    -- Validate if the sender has sufficient balance
    IF @FromAccountBalance >= @Amount
    BEGIN
        -- Deduct the amount from the sender's account
        UPDATE Accounts
        SET Balance = Balance - @Amount
        WHERE AccountID = @FromAccountID;

        -- Add the amount to the recipient's account
        UPDATE Accounts
        SET Balance = Balance + @Amount
        WHERE AccountID = @ToAccountID;

        -- Log the transaction in the Transactions table
        INSERT INTO Transactions (FromAccountID, ToAccountID, Amount, TransactionDate)
        VALUES (@FromAccountID, @ToAccountID, @Amount, GETDATE());

        -- Commit the transaction
        COMMIT TRANSACTION;
    END
    ELSE
    BEGIN
        -- Rollback the transaction in case of insufficient funds
        ROLLBACK TRANSACTION;
        -- Raise an error for insufficient funds
        RAISERROR('Insufficient balance in the senderâ€™s account.', 16, 1);
    END
END;
GO
USE [master]
GO
ALTER DATABASE [Transfer_App] SET  READ_WRITE 
GO
